@create Events Command Object <ECO>

&.HEADER Events Command Object <ECO>=header(%0)
&.FOOTER Events Command Object <ECO>=footer(%0)
&.DIVIDER Events Command Object <ECO>=divider(%0)
&.ALERT Events Command Object <ECO>=[ansi(r, >)][ansi(rh, %b%0%b)][ansi(r, <)]
&.ISSTAFF Events Command Object <ECO>=isstaff(%0)
&.ISAPPROVED Events Command Object <ECO>=isapproved(%0)

&C.+EVENTS Events Command Object <ECO>=$+events:@pemit %#=[u(.header, Current [mudname()] Events)]%r[ansi(h, [ljust(NUM, 5)][ljust(ST, 10)][ljust(Genre,10)][ljust(Title, 26)][ljust(Date, 21)]%b[ljust(Sgnps, 5)])]%r[iter(lattr(v(edb)/event.*), [ljust(after(##, .),4)] [ljust(name(first(get(v(edb)/##), |)), 10)][ljust(extract(get(v(edb)/##), 2, 1, |), 10)][ljust(extract(get(v(edb)/##), 3, 1, |), 26)][u(fn.time, ##)] [if(hasattr(v(edb), signups.[last(##,.)]), [words(get(v(edb)/signups.[last(##, .)]))], 0)], , %r)]%r[u(.footer, words(lattr(v(edb)/event.*)))]

&C.+EVENT_LOOKUP Events Command Object <ECO>=$+event *:@pemit %#=[if(hasattr(v(edb), event.%0), [u(.header, [extract(get(v(edb)/event.%0), 3, 1, |)] - [u(fn.time, EVENT.%0)])]%r[u(v(edb)/summary.%0)]%r%r[ansi(h, Storyteller)]: [name(first(get(v(edb)/event.%0), |))]%r[ansi(h, Genre)]: [extract(get(v(edb)/event.%0), 2, 1, |)][if(lattr(v(edb)/summary.%0.*), %r[iter(lattr(v(edb)/summary.%0.*), [ansi(h, last(##, .))]: [get(v(edb)/##)], , %r)], )]%r[ansi(h, Signups)]: [iter(get(v(edb)/signups.%0), [name(##)], , %,%b)]%r[u(.footer, %0:%b[extract(get(v(edb)/event.%0), 3, 1, |)] - [u(fn.time, EVENT.%0)] - [if(hasattr(v(edb), signups.%0), [words(get(v(edb)/signups.%0))], 0)])], [u(.alert, +Events)] Unfortunately there is no event %0! Please use +Events to see the current list.)]

&C.+EVENT/CREATE Events Command Object <ECO>=$+event/create *=*/*/*:@switch 1=[not(setr(1, u(fn.parsetimestamp, %1)))], {@pemit %#=[u(.alert, +Events)] '%1' is not a proper datestamp. For an example%, see 'help time'.}, [gt(secs(),%q1)],{@pemit %#=[u(.alert, +Events)] '%1' has already passed.}, [or(u(.isstaff, %#), u(.isapproved, %#))], {[setq(0, add(get(v(edb)/eventtotal), 1))][set(v(edb), event.%q0:[pmatch(%#)]|%2|%0|%q1)][set(v(edb), summary.%q0:%3)][set(v(edb), eventtotal:%q0)][set(v(edb), remindday.%q0:[sub(%q1, 86400)])];@pemit %#=[u(.alert, +Events)] You have setup +event %q0. Please check to make certain all of the details are correct!;@trig %!/trig_post=%0, %3, %1, %q0, %2}, {@pemit %#=[u(.alert, +Events)] Sorry%, only staff or approved characters can use this command!}

&FN.PARSETIMESTAMP Events Command Object <ECO>=switch(words(%0), 5, convtime([extract(%0, 1, 3)]%b[u(fn.parsetime, extract(%0, 4, 1))]%b[extract(%0, 5, 1)]), 4, convtime(XXX%b[extract(%0, 1, 2)]%b[u(fn.parsetime, extract(%0, 3, 1))]%b[extract(%0, 4, 1)]), 3, convtime(XXX%b[extract(%0, 1, 2)]%b[u(fn.parsetime, extract(%0, 3, 1))]%b[last(time())]), #-1 Invalid timestamp)

&FN.PARSETIME Events Command Object <ECO>=switch(words(%0,:), 3, %0, 2, %0:00, 1, %0:00:00)

&C.+EVENT/CHANGEDATE Events Command Object <ECO>=$+event/changedate *=*:@swi 1=[not(setr(1, u(fn.parsetimestamp, %1)))], {@pemit %#=[u(.alert, +Events)] '%1' is not a proper datestamp. For an example%, see 'help time'.}, {@swi [or(u(.isstaff, %#), strmatch(first(get(v(edb)/event.%0), |), %#))]=1,{@swi [hasattr(v(edb), event.%0)]=1,{[set(v(edb), event.%0:[extract(get(v(edb)/event.%0), 1, 3, |)]|%q1)][set(v(edb), remindday.%0:[sub(%q1, 86400)])];@pemit %#=[u(.alert, +Events)] You change the date of %0 to [convsecs(%q1)]%b[get(v(edb)/default.timezone)].;@trig %!/trig.mail=[get(v(edb)/signups.%0)], Event Reschedule, [name(%#)] has rescheduled +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%) to [convsecs(%q1)]%b[get(v(edb)/default.timezone)].}, {@pemit %#=[u(.alert, +Events)] There is no +Event %0.)]}},{@pemit %#=[u(.alert, +Events)] Only [name(first(get(v(edb)/event.%0), |))] or Staff can change this event's date.}}

&C.+EVENT/SIGNUP Events Command Object <ECO>=$+event/signup *:@swi [isnum(%0)]=1, {@swi [or(u(.isstaff, %#), u(.isapproved, %#))]=1, {@swi [hasattr(v(edb), event.%0)]=1, {@swi [hasattr(v(edb), signups.%0)]=1,{@swi [t(grab(get(v(edb)/signups.%0), [pmatch(%#)]))]=1, {@pemit %#=[u(.alert, +Events)] You are already signed up for +Event %0.}, {[set(v(edb), signups.%0:[get(v(edb)/signups.%0)] [pmatch(%#)])];@pemit %#=[u(.alert, +Events)] You have been signed up for +Event %0.;@trig %!/trig.mail=[first(get(v(edb)/event.%0), |)], New Event Signup, [name(%#)] has signed up for your +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%).}}, {[set(v(edb), signups.%0:[pmatch(%#)])];@pemit %#=[u(.alert, +Events)] You have been signed up to +Event %0.;@trig %!/trig.mail=[first(get(v(edb)/event.%0), |)], New Event Signup, [name(%#)] has signed up for your +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%).}}, {@pemit %#=[u(.alert, +Events)] Sorry %0 is not an event. Check +events for the list of current events.}}, {@pemit %#=[u(.alert, +Events)] Sorry%, only approved players can +Event/signup.}}, {@pemit %#=[u(.alert, Events)] Please use a number. Such as +Event 1.}

&C.+EVENT/UNSIGNUP Events Command Object <ECO>=$+event/unsignup *:@swi [hasattr(v(edb), event.%0)]=1,{@swi [t(grab(get(v(edb)/signups.%0), [pmatch(%#)]))]=1, {[set(v(edb), signups.%0:[setdiff(get(v(edb)/signups.%0), [pmatch(%#)])])];@pemit %#=[u(.alert, +Events)] You have been removed from +Event %0.;@trig %!/trig.mail=[first(get(v(edb)/event.%0), |)], New Event Cancellation, [name(%#)] has unsigned up for your +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%).}, {@pemit %#=[u(.alert, +Events)] You are not signed up for +Event %0.}},{@pemit %#=[u(.alert, +Events)] There is no %0 +Event. Please check +events for the current list of events.}

&C.+EVENT/CANCEL Events Command Object <ECO>=$+event/cancel *:@swi [or(u(.isstaff, %#), strmatch(first(get(v(edb)/event.%0), |), %#))]=1, {@swi [hasattr(v(edb), event.%0)]=1, {@trig %!/trig.mail=[get(v(edb)/signups.%0)], Event Cancellation, [name(%#)] has canceled +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%).;[wipe(v(edb)/event.%0)][wipe(v(edb)/summary.%0)][wipe(v(edb)/signups.%0)][wipe(v(edb)/remindday.%0)];@pemit %#=[u(.alert, +Events)] You have canceled +Event %0.}, {@pemit %#=[u(.alert, +Events)] There is not +Event %0.}}, {@pemit %#=[u(.alert, +Events)] Only [name(first(get(v(edb)/event.%0), |))] or Staff can cancel this event.}

&C.+EVENT/REMOVE Events Command Object <ECO>=$+event/remove *=*:@swi [or(u(.isstaff, %#), strmatch(first(get(v(edb)/event.%0), |), %#))]=1, {@swi [t(grab(get(v(edb)/signups.%0), [pmatch(%1)]))]=1, {[set(v(edb), signups.%0:[setdiff(get(v(edb)/signups.%0), [pmatch(%1)])])];@pemit %#=[u(.alert, +Events)] You've remove %1 from +Event %0.;@trig %!/trig.mail=%1, Event Removal, You have been removed from +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%).}, {@pemit %#=[u(.alert, +Events)] %1 is not signed up for +Event %0.}, {@pemit %#=[u(.alert, +Events)] Only [name(first(get(v(edb)/event.%0), |))] or Staff can remove players from +Event %0.}

&C.+EVENT/ADDSUM Events Command Object <ECO>=$+event/addsum *=*:@swi [or(u(.isstaff, %#), strmatch(first(get(v(edb)/event.%0), |), %#))]=1, {@swi [hasattr(v(edb), event.%0)]=1, {@swi [filter(%!/fil.attrname, %1, /)]=1, {@pemit %#=[u(.alert, Events, alert)] The following items cannot be set because they do not have appropriate attribute names%, make sure you are using one word and no numbers:%r[iter(filter(%!/fil.attrname, %1, /,%B), edit(##, =, :%b), /, %r)]}, {@pemit %#=[u(.alert, Events)] Setting the following attributes to +event %0: %r[iter(%1, edit(##, =, :%b)[set(v(edb), Summary.%0.[first(##, =)]:[rest(##, =)])], /, %r)];@trig %!/trig.mail=[get(v(edb)/signups.%0)], Event Summary Addition, [name(%#)] has added to the summary of +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%)%r%r[iter(%1, edit(##, =, :%b), /, %r)].}}, {@pemit %#=[u(.alert, +Events)] There is no +Event %0.}}, {@pemit %#=[u(.alert, +Events)] Only [name(first(get(v(edb)/event.%0), |))] or Staff can change this event's date.}

&FIL.ATTRNAME Events Command Object <ECO>=not(valid(attrname, first(%0, =)))

&SORTBY.EVENT-DATE Events Command Object <ECO>=comp(extract(get(v(edb)/event.[last(%0, .)]), 4, 1, |), extract(get(v(edb)/event.[last(%1, .)]), 4, 1, |))

&C.+EVENTS/DATE Events Command Object <ECO>=$+events/date:@pemit %#=[u(.header, Current [mudname()] Events)])]%r[ansi(h, [ljust(NUM, 5)][ljust(ST, 10)][ljust(Genre, 10)][ljust(Title, 26)][ljust(Date, 21)]%b[ljust(Sgnps, 5)])]%r[iter(sortby(%!/sortby.event-date, lattr(v(edb)/event.*)), [ljust(after(##, .), 5)][ljust(name(first(get(v(edb)/##), |)), 10)][ljust(extract(get(v(edb)/##), 2, 1, |), 10)][ljust(extract(get(v(edb)/##), 3, 1, |), 26)][u(fn.time, ##)] [if(hasattr(v(edb), signups.[last(##, .)]), [words(get(v(edb)/signups.[last(##, .)]))], 0)], , %r)]%r[u(.footer, words(lattr(v(edb)/event.*)))]

&C.+EVENT/CHANGESUM Events Command Object <ECO>=$+event/changesum *=*:@swi [or(u(.isstaff, %#), strmatch(first(get(v(edb)/event.%0), |), %#))]=1, {@swi [hasattr(v(edb), event.%0)]=1, {[set(v(edb), summary.%0:%1)];@pemit %#=[u(.alert, +Events)] You change the Summary of %0 to %1. Note this does not remove any summary items added with +Events/addsum!;@trig %!/trig.mail=[get(v(edb)/signups.%0)], Event Summary Change, [name(%#)] has changed the summary of +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%)%r%r%1.}, {@pemit %#=[u(.alert, +Events)] There is no +Event %0.}, {@pemit %#=[u(.alert, +Events)] Only [name(first(get(v(edb)/event.%0), |))] or Staff can change this event's date.}

&C.+EVENT/LEAVE Events Command Object <ECO>=$+event/leave *=@force %#=+event/unsignup %0

&C.+EVENT/RESIGN Events Command Object <ECO>=$+event/resign *=@force %#=+event/unsignup %0

&C.+EVENTS/MINE Events Command Object <ECO>=$+events/mine:@pemit %#=[u(.header, [name(%#)]'s Current +Events)]%r[ansi(h, [ljust(NUM, 5)][ljust(ST,10)][ljust(Genre, 10)][ljust(Title, 26)][ljust(Date, 21)]%b[ljust(Sgnps, 5)])]%r[setq(1, u(fn.get_signed_up_for, %#))][setq(2, u(fn.get_is_st_for, %#))][iter(sortby(sortby.event-date, %q1 %q2), [ljust(##, 4)] [ljust(name(first(get(v(edb)/event.##), |)), 10)][ljust(extract(get(v(edb)/event.##), 2, 1, |), 10)][ljust(extract(get(v(edb)/event.##), 3, 1, |), 26)][u(fn.time, EVENT.## )] [words(get(v(edb)/signups.##))], , %r)]%r[u(.footer, [words(%q1)] of [words(lattr(v(edb)/event.*))] events)]

&FN.GET_SIGNED_UP_FOR Events Command Object <ECO>=edit(iter(lattr(v(edb)/signups.*), switch(t(match(get(v(edb)/##), %0)),1,##,)), SIGNUPS., )

&FN.GET_IS_ST_FOR Events Command Object <ECO>=edit(iter(lattr(v(edb)/event.*), switch(strmatch(first(get(v(edb)/##), |), %0),1,##,)), EVENT.,)

&C.+EVENT/MAIL Events Command Object <ECO>=$+event/mail *=*:@swi [or(u(.isstaff, %#), strmatch(first(get(v(edb)/event.%0), |), %#))]=1, {@swi [hasattr(v(edb), event.%0)]=1, {@swi [hasattr(v(edb), signups.%0)]=1, {@pemit %#=[u(.alert, Events)] @mailing [iter(get(v(edb)/signups.%0), name(##), ,%,%b)] about Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%).;@trig %!/trig.mail=[get(v(edb)/signups.%0)], Event %0 - Mail, [name(%#)] is mailing about +Event %0 %([extract(get(v(edb)/event.%0), 3, 1, |)]%)%r[u(.divider, )]%r%1.}, {@pemit %#=[u(.alert, Events, alert)] +Event %0 has no signups to @mail.)]}}, {@pemit %#=[u(.alert, +Events)] There is no +Event %0.}}, {@pemit %#=[u(.alert, +Events)] Only [name(first(get(v(edb)/event.%0), |))] or Staff can mail about this date.}

&FN.TIME Events Command Object <ECO>=[if(hasattr(%#, event.hours), [u(FN.PENNTIME, add(extract(get(v(edb)/%0), 4, 1, |), mul(3600, secure(get(%#/event.hours)))))]%b[secure(get(%#/event.timezone))], [u(FN.PENNTIME, extract(get(v(edb)/%0), 4, 1, |))]%b[if(get(v(edb)/timezone.[last(%0, .)]), [get(v(edb)/timezone.[last(%0, .)])], [get(v(edb)/default.timezone)])])]

&FN.PENNTIME Events Command Object <ECO>=[setq(9, rest(convsecs(%0)))][extract(%q9,1,2,:)]%b[last(%q9)]

&C.+EVENT/ST Events Command Object <ECO>=$+events/st *:@pemit %#=[if(pmatch(%0), [u(.header, Current [mudname()] Events)]%r[ansi(h, [ljust(NUM, 5)][ljust(ST,10)][ljust(Genre, 10)][ljust(Title, 26)][ljust(Date, 21)] [ljust(Sgnps, 5)])]%r[setq(2, iter(lattr(v(edb)/event.*), if(strmatch(first(get(v(edb)/##), |), [pmatch(%0)]), after(##, .))))][iter(sortby(sortby.event-date, %q2), [ljust(##,4)] [ljust(name(first(get(v(edb)/event.##), |)), 10)][ljust(extract(get(v(edb)/event.##), 2, 1, |), 10)][ljust(extract(get(v(edb)/event.##), 3, 1, |), 26)][u(fn.time, event.##)] [words(get(v(edb)/signups.##))], , %r)]%r[u(.footer, [words(%q1)] of[words(lattr(v(edb)/event.*))] events)], [u(.alert, +Events)] I cannot find %0 as a player.)]

&TRIG_POST Events Command Object <ECO>=@fo me=+bbpost 36/Event %3: %0=[ansi(h, Summary)]: %1%r%r[ansi(h, Time)]: %2%r%r[ansi(h, Posted As)]: +event %3%r%r[ansi(h, Genre)]: %4

&TRIG.MAIL Events Command Object <ECO>=@mail %0=%1/%2

&TRIG.DAILY Events Command Object <ECO>=[iter(lattr(v(edb)/event.*), [if(lte([last(get(v(edb)/##), |)], [Secs()]), [wipe(v(edb)/##)][wipe(v(edb)/summary.[last(##, .)])][wipe(v(edb)/remindday.[last(##, .)])][wipe(v(edb)/signups.[last(##, .)])])])];@dol [lattr(v(edb)/remindday.*)]={@swi [lte([last(get(v(edb)/##), |)], Secs())]=1,{@trig %!/trig.mail=[get(v(edb)/signups.[last(##, .)])], Event Reminder, You are signed up for +Event [last(##, .)] %([extract(get(v(edb)/event.[last(##, .)]), 3, 1, |)]%) which will be held on [convsecs(last(get(v(edb)/event.[last(##, .)]), |))][get(v(edb)/TIMEZONE.[last(##, .)])].; @trig %!/trig.mail=[first(get(v(edb)/event.[last(##, .)]), |)], ST Event Reminder, You are scheduled to run +Event [last(##, .)] %([extract(get(v(edb)/event.[last(##, .)]), 3, 1, |)]%) which will be held on [convsecs(last(get(v(edb)/event.[last(##, .)]), |))].}, {think This is an error message.}}


@set Events Command Object <ECO>=WIZARD

@set Events Command Object <ECO>=!NO_COMMAND

@@ ---------------------------------------

@create Events Database <EDB>

&EVENTTOTAL Events Database <EDB>=1

&DEFAULT.TIMEZONE Events Database <EDB>=EST


@@ ---------------------------------------

@force me=&EDB Events Command Object <ECO>=num( Events Database <EDB> )

@daily Events Command Object <ECO>=@trigger /TRIG.DAILY


&HELP~OOC_COMMANDS~+EVENTS #74=+Event Commands~[ansi(h, Using Events)]%r%b [ansi(h, +events)]%r%b [ansi(h, +events/date)]%r%b [ansi(h, +events/st <name>)]%r%b [ansi(h, +event #)]%r%b [ansi(h, +event/signup #)]%r%b [ansi(h, +event/unsignup #)]%r%r[ansi(h, Creating/Modifying Events)]%r%b [ansi(h, +event/create <Title>=<timestamp*>/<genre>/<summary>)]%r%b [ansi(h, +event/remove #=<Player>)]%r%b [ansi(h, +event/changedate #=<timestamp*>)]%r%b [ansi(h, +event/changesum #=<New Summary>)]%r%b [ansi(h, +events/addsum #=Thing=<Stuff>/Thing2=<Stuff2>/Thing3=<Stuff>/...)]%r%b [ansi(h, +event/cancel #)]%r%r[ansi(h, NOTE)]: All timestamps be input as server time (EST here), in 24 hour time, and be in one of the following formats:%r* Mmm Dd HH:MM YYYY format such as: Apr 26 22:04 2015%r* Mmm Dd HH:MM format such as: Apr 26 22:04 and current year is used%r* Mmm Dd HH format such as: Apr 26 22 and 22:00 current year is used%r%rIn-depth break down of the commands found on following pages.%r%r[ansi(h, * Notifications)]: When someone signs up, or unsigns up an @mail is sent to the event ST. If the event ST changes the date of cancels the event an @mail is sent to the attendees.%r%r[ansi(h, * Reminder)]: The attendees of an event will be sent a reminder @mail the morning of the day before the event.~[ansi(h, ATTENDEE COMMANDS)]%r%r[ansi(h, +events)] - This command will bring up the list of all current events!%r%r[ansi(h, +events/date)] - This command will list current events by date.%r%r[ansi(h, +events/st *)] - This command will list current events created by the named ST.%r%r[ansi(h, +event #)] - This command will bring up the summary information, date, and current signups of a specific event.%r%b %b e.g.: +event 5%r%r[ansi(h, +event/signup #)] - This command will add you to the list of those signed up for an event.%r%b %b e.g.: +Event/signup 5%r%r[ansi(h, +event/unsignup #)] - This command will remove you from the list of those signed up for an event.%r%b %b e.g.: +Event/unsignup 5~[ansi(h, STORYTELLER COMMANDS)]%r%r[ansi(h, +event/create <Title>=<Mmm Dd YYYY HH:MM>/<Genre>/<Summary>)] - This command will create an event. Note: The date must be in the formats allowed, e.g.: Mmm Dd HH:MM YYYY, like in the example.%r%b %b e.g.: +Event/create "Fear"=Aug 20 04:03 2010/Horror/This is just an example!%r%r[ansi(h, +event/changedate #=<Mmm Dd HH:MM YYYY>)] - This command will change the date of an event. Note: The date must follow the timestamp guidelines in +help events be in the form of Mmm Dd HH:MM YYYY, like in the example.%r%b %b e.g.: +event/changedate 5=Aug 21 04:03 2010%r%r[ansi(h, +event/cancel #)] - This command will cancel an event. Note: This command can /only/ be used by staff or the Storyteller for the event.%r%b %b e.g.: +event/cancel 5%r%r[ansi(h, +event/remove #=<Player>)] - This command will remove a player from an event. Note: This command can only be used by staff or the Storyteller for the event.%r%b %b e.g.: +Event/remove 5=Puce%r%r[ansi(h, +event/changesum #=<New Summary>)] - This command allows you to change the summary of an already posted event. Note: This will not override items set with +event/addsum.%r%b %b e.g.: +Event/changesum 5=This is a sample event.%r%r[ansi(h, +event/addsum #=Thing=<Stuff>/Thing2=<Stuff2>/Thing3=<stuff3>/...)] - This command allows you to add nigh-limitless attributes to an event you have created. Note: This must be one word!%r%b %b e.g.: +event/addsum 5=Threat=Threat level is low./Reward=Treasure in%r%b %b the form of a token or hedgespinning mat